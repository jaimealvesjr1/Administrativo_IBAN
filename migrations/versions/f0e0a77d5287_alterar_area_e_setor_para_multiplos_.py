"""Alterar area e setor para multiplos supervisores

Revision ID: f0e0a77d5287
Revises: 2be1615eb457
Create Date: 2025-09-02 10:05:23.584562

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column
from sqlalchemy import Integer, String



# revision identifiers, used by Alembic.
revision = 'f0e0a77d5287'
down_revision = '2be1615eb457'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('area_supervisores',
    sa.Column('area_id', sa.Integer(), nullable=False),
    sa.Column('supervisor_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.ForeignKeyConstraint(['supervisor_id'], ['membro.id'], ),
    sa.PrimaryKeyConstraint('area_id', 'supervisor_id')
    )
    op.create_table('setor_supervisores',
    sa.Column('setor_id', sa.Integer(), nullable=False),
    sa.Column('supervisor_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['setor_id'], ['setor.id'], ),
    sa.ForeignKeyConstraint(['supervisor_id'], ['membro.id'], ),
    sa.PrimaryKeyConstraint('setor_id', 'supervisor_id')
    )

    area_table = table('area',
        column('id', Integer),
        column('coordenador_id', Integer)
    )
    setor_table = table('setor',
        column('id', Integer),
        column('supervisor_id', Integer)
    )

    connection = op.get_bind()
    areas = connection.execute(sa.select(area_table.c.id, area_table.c.coordenador_id)).fetchall()

    area_supervisores_inserts = []
    for area in areas:
        if area.coordenador_id:
            area_supervisores_inserts.append({'area_id': area.id, 'supervisor_id': area.coordenador_id})
    
    if area_supervisores_inserts:
        op.bulk_insert(table('area_supervisores',
            column('area_id', Integer),
            column('supervisor_id', Integer)
        ), area_supervisores_inserts)

    setores = connection.execute(sa.select(setor_table.c.id, setor_table.c.supervisor_id)).fetchall()

    setor_supervisores_inserts = []
    for setor in setores:
        if setor.supervisor_id:
            setor_supervisores_inserts.append({'setor_id': setor.id, 'supervisor_id': setor.supervisor_id})

    if setor_supervisores_inserts:
        op.bulk_insert(table('setor_supervisores',
            column('setor_id', Integer),
            column('supervisor_id', Integer)
        ), setor_supervisores_inserts)

    with op.batch_alter_table('area', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_area_coordenador_id_membro'), type_='foreignkey')
        batch_op.drop_column('coordenador_id')

    with op.batch_alter_table('setor', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_setor_supervisor_id_membro'), type_='foreignkey')
        batch_op.drop_column('supervisor_id')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('setor', schema=None) as batch_op:
        batch_op.add_column(sa.Column('supervisor_id', sa.INTEGER(), nullable=False))
        batch_op.create_foreign_key(batch_op.f('fk_setor_supervisor_id_membro'), 'membro', ['supervisor_id'], ['id'])

    with op.batch_alter_table('area', schema=None) as batch_op:
        batch_op.add_column(sa.Column('coordenador_id', sa.INTEGER(), nullable=False))
        batch_op.create_foreign_key(batch_op.f('fk_area_coordenador_id_membro'), 'membro', ['coordenador_id'], ['id'])

    op.drop_table('setor_supervisores')
    op.drop_table('area_supervisores')
    # ### end Alembic commands ###
